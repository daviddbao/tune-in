{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["spot","SpotifyWebApi","App","token","getHashParams","access_token","setAccessToken","state","loggedIn","topTracks","topArtists","user_id","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","getMe","then","user","setState","id","getMyTopTracks","limit","time_range","response","items","console","log","this","getMyTopArtists","rank","map","track","name","artists","x","join","preview","preview_url","key","href","toUpperCase","getTops","renderTracksTableHeader","renderTracksTableData","artist","renderArtistsTableHeader","renderArtistsTableData","className","renderTrackTable","renderArtistTable","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yOAGMA,EAAO,I,OAAIC,GAsKFC,E,kDAnKb,aAAc,IAAD,sBAEX,IACMC,GAFN,gBACoBC,gBACCC,aAHV,OAIPF,GACFH,EAAKM,eAAeH,GAEtB,EAAKI,MAAQ,CACXC,WAAUL,EACVM,UAAW,GACXC,WAAY,GACZC,QAAS,IAXA,E,4DAgBX,IACIC,EADAC,EAAa,GACVC,EAAI,uBACPC,EAAIC,OAAOC,SAASC,KAAKC,UAAU,GAEvC,IADAP,EAAIE,EAAEM,KAAKL,GACJH,GACJC,EAAWD,EAAE,IAAMS,mBAAmBT,EAAE,IACxCA,EAAIE,EAAEM,KAAKL,GAEd,OAAOF,I,gCAGE,IAAD,OACRb,EAAKsB,QACFC,MAAK,SAACC,GACL,EAAKC,SAAS,CACZd,QAASa,EAAKE,QAGpB1B,EAAK2B,eAAe,CAClBC,MAAO,GACPC,WAAY,eAEXN,MAAK,SAACO,GACL,EAAKL,SAAS,CACZhB,UAAWqB,EAASC,WAG1BC,QAAQC,IAAIC,KAAK3B,OACjBP,EAAKmC,gBAAgB,CACnBP,MAAO,GACPC,WAAY,eAEXN,MAAK,SAACO,GACL,EAAKL,SAAS,CACZf,WAAYoB,EAASC,WAG3BC,QAAQC,IAAIC,KAAK3B,S,8CAIjB,IAAI6B,EAAO,EACX,OAAOF,KAAK3B,MAAME,UAAU4B,KAAI,SAACC,GAC9BF,IACA,IAAMG,EAAOD,EAAMC,KACbC,EAAUF,EAAME,QAAQH,KAAI,SAACI,GAAD,OAAOA,EAAEF,QAAMG,KAAK,MAChDC,EAAUL,EAAMM,YACtB,OACG,wBAAIC,IAAKN,GACN,4BAAKH,GACL,4BAAKG,GACL,4BAAKC,GACL,4BAAI,uBAAGM,KAAMH,GAAT,4B,0CASb,MADa,CAAC,OAAQ,OAAQ,YAAa,WAC7BN,KAAI,SAACQ,GAChB,OAAO,wBAAIA,IAAKA,GAAMA,EAAIE,oB,yCAM7B,OADAb,KAAKc,UAEH,6BACG,wBAAItB,GAAG,SAAP,cACA,2BAAOA,GAAG,UACP,+BACG,gCAAMQ,KAAKe,0BAAX,KACCf,KAAKgB,6B,+CAQjB,IAAId,EAAO,EACX,OAAOF,KAAK3B,MAAMG,WAAW2B,KAAI,SAACc,GAC/B,IAAMZ,EAAOY,EAAOZ,KAEpB,OADAH,IAEG,wBAAIS,IAAKN,GACN,4BAAKH,GACL,4BAAKG,S,iDAQd,MADa,CAAC,OAAQ,QACRF,KAAI,SAACQ,GAChB,OAAO,wBAAIA,IAAKA,GAAMA,EAAIE,oB,0CAM7B,OACE,6BACG,wBAAIrB,GAAG,SAAP,WACA,2BAAOA,GAAG,UACP,+BACG,gCAAMQ,KAAKkB,2BAAX,KACClB,KAAKmB,8B,+BAQjB,OACE,yBAAKC,UAAU,OACb,6BACE,6CAAmBtC,OAAOb,QAE5B,8BACK+B,KAAK3B,MAAMC,UACZ,uBAAGsC,KAAK,yBAAR,uBAGJ,6BACIZ,KAAK3B,MAAMC,UACX,6BACI0B,KAAKqB,qBAIb,6BACIrB,KAAK3B,MAAMC,UACX,6BACI0B,KAAKsB,2B,GA3JHC,aCOEC,QACW,cAA7B1C,OAAOC,SAAS0C,UAEe,UAA7B3C,OAAOC,SAAS0C,UAEhB3C,OAAOC,SAAS0C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,a","file":"js/main.e5c93d01.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport SpotifyWebApi from \"spotify-web-api-js\";\nconst spot = new SpotifyWebApi();\n\nclass App extends Component {\n  constructor(){\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if (token) {\n      spot.setAccessToken(token);\n    }\n    this.state = {\n      loggedIn: token ? true : false,\n      topTracks: [],\n      topArtists: [],\n      user_id: \"\"\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n       e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  getTops() {\n    spot.getMe()\n      .then((user) => {\n        this.setState({\n          user_id: user.id\n        });\n      })\n    spot.getMyTopTracks({\n      limit: 50,\n      time_range: \"short_term\"\n    })\n      .then((response) => {\n        this.setState({\n          topTracks: response.items\n        });\n      })\n    console.log(this.state)\n    spot.getMyTopArtists({\n      limit: 50,\n      time_range: \"short_term\"\n    })\n      .then((response) => {\n        this.setState({\n          topArtists: response.items\n        });\n      })\n    console.log(this.state)\n  }\n\n  renderTracksTableData() {\n    var rank = 0;\n    return this.state.topTracks.map((track) => {\n       rank++;\n       const name = track.name;\n       const artists = track.artists.map((x) => x.name).join(\", \");\n       const preview = track.preview_url;\n       return (\n          <tr key={name}>\n             <td>{rank}</td>\n             <td>{name}</td>\n             <td>{artists}</td>\n             <td><a href={preview}> Click to listen </a></td>\n          </tr>\n       )\n    })\n  }\n//TODO: get album art\n  renderTableHeader() {\n    // let header = Object.keys(this.state.topTracks[0]);\n    let header = [\"Rank\", \"Name\", \"Artist(s)\", \"Preview\"];\n    return header.map((key) => {\n       return <th key={key}>{key.toUpperCase()}</th>\n    })\n  }\n\n  renderTrackTable() {\n    this.getTops();\n    return (\n      <div>\n         <h1 id='title'>Top Tracks</h1>\n         <table id='tracks'>\n            <tbody>\n               <tr> {this.renderTracksTableHeader()} </tr>\n               {this.renderTracksTableData()}\n            </tbody>\n         </table>\n      </div>\n   )\n  }\n\n  renderArtistsTableData() {\n    var rank = 0;\n    return this.state.topArtists.map((artist) => {\n       const name = artist.name;\n       rank++\n       return (\n          <tr key={name}>\n             <td>{rank}</td>\n             <td>{name}</td>\n          </tr>\n       )\n    })\n  }\n\n  renderArtistsTableHeader() {\n    let header = [\"Rank\", \"Name\"];\n    return header.map((key) => {\n       return <th key={key}>{key.toUpperCase()}</th>\n    })\n  }\n\n  renderArtistTable() {\n    // this.getTops();\n    return (\n      <div>\n         <h1 id='title'>Artists</h1>\n         <table id='tracks'>\n            <tbody>\n               <tr> {this.renderArtistsTableHeader()} </tr>\n               {this.renderArtistsTableData()}\n            </tbody>\n         </table>\n      </div>\n   )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <p>Just checking: {window.token}</p>\n        </div>\n        <div>\n          { !this.state.loggedIn &&\n            <a href='http://localhost:8888' > Login to Spotify </a>\n          }\n        </div>\n        <div>\n          { this.state.loggedIn &&\n            <div>\n              { this.renderTrackTable() }\n            </div>\n          }\n        </div>\n        <div>\n          { this.state.loggedIn &&\n            <div>\n              { this.renderArtistTable() }\n            </div>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}